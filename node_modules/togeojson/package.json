{
  "name": "togeojson",
  "version": "0.10.1",
  "description": "convert KML and GPX to GeoJSON",
  "main": "togeojson.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "tape test/*.js",
    "cov": "istanbul cover test/index.js && coveralls < ./coverage/lcov.info",
    "browser": "browserify -t brfs test/index.js > test/bundle.js"
  },
  "devDependencies": {
    "brfs": "~0.2.1",
    "coveralls": "~2.10.0",
    "glob": "^4.2.1",
    "istanbul": "~0.2.11",
    "tape": "~3.0.3"
  },
  "bin": {
    "togeojson": "togeojson"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mapbox/togeojson.git"
  },
  "browser": {
    "xmldom": false
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "license": "BSD",
  "dependencies": {
    "xmldom": "~0.1.19",
    "concat-stream": "~1.4.5",
    "minimist": "0.0.8"
  },
  "keywords": [
    "kml",
    "geojson",
    "gpx",
    "geo",
    "parser",
    "formatter",
    "input",
    "leaflet",
    "maps"
  ],
  "readme": "[![build status](https://secure.travis-ci.org/mapbox/togeojson.png)](http://travis-ci.org/mapbox/togeojson) [![Coverage Status](https://coveralls.io/repos/mapbox/togeojson/badge.png)](https://coveralls.io/r/mapbox/togeojson)\n\n# Convert KML and GPX to GeoJSON.\n\nThis converts [KML](https://developers.google.com/kml/documentation/) & [GPX](http://www.topografix.com/gpx.asp)\nto\n[GeoJSON](http://www.geojson.org/), in a browser or with [nodejs](http://nodejs.org/).\n\nIt is\n\n* Dependency-free\n* Tiny\n* Written in vanilla javascript that's jshint-friendly\n* Tested\n\nIt is not\n\n* Concerned about ugly extensions to KML\n* Concerned with having an 'internal format' of its own\n\nWant to use this with [Leaflet](http://leafletjs.com/)? Try [leaflet-omnivore](https://github.com/mapbox/leaflet-omnivore)!\n\n## API\n\n### `toGeoJSON.kml(doc)`\n\nConvert a KML document to GeoJSON. The first argument, `doc`, must be a KML\ndocument as an XML DOM - not as a string. You can get this using jQuery's default\n`.ajax` function or using a bare XMLHttpRequest with the `.response` property\nholding an XML DOM.\n\nThe output is a Javascript object of GeoJSON data. You can convert it to a string\nwith [JSON.stringify](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify)\nor use it directly in libraries like [mapbox.js](http://www.mapbox.com/mapbox.js/).\n\n### `toGeoJSON.gpx(doc)`\n\nConvert a GPX document to GeoJSON. The first argument, `doc`, must be a GPX\ndocument as an XML DOM - not as a string. You can get this using jQuery's default\n`.ajax` function or using a bare XMLHttpRequest with the `.response` property\nholding an XML DOM.\n\nThe output is a Javascript object of GeoJSON data, same as `.kml` outputs.\n\n\n## Using it as a console utility\n\nInstall it into your path with `npm install -g togeojson`.\n\n```\n~> togeojson file.kml > file.geojson\n```\n\n## Using it as a nodejs library\n\nInstall it into your project with `npm install --save togeojson`.\n\n```javascript\n// using togeojson in nodejs\n\nvar tj = require('togeojson'),\n    fs = require('fs'),\n    // node doesn't have xml parsing or a dom. use jsdom\n    jsdom = require('jsdom').jsdom;\n\nvar kml = jsdom(fs.readFileSync('foo.kml', 'utf8'));\n\nvar converted = tj.kml(kml);\n\nvar converted_with_styles = tj.kml(kml, { styles: true });\n```\n\n## Using it as a browser library\n\nDownload it into your project like\n\n    wget https://raw.github.com/tmcw/togeojson/gh-pages/togeojson.js\n    \nOr install with [Bower](http://bower.io)\n\t\n    bower install togeojson\n\n```html\n<script src='jquery.js'></script>\n<script src='togeojson.js'></script>\n<script>\n$.ajax('test/data/linestring.kml').done(function(xml) {\n    console.log(toGeoJSON.kml(xml));\n});\n</script>\n```\n\ntoGeoJSON doesn't include AJAX - you can use [jQuery](http://jquery.com/) for\njust AJAX.\n\n## KML\n\nSupported:\n\n* Point\n* Polygon\n* LineString\n* name & description\n* ExtendedData\n* SimpleData\n* MultiGeometry -> GeometryCollection\n* Styles with hashing\n* Tracks & MultiTracks with `gx:coords`, including altitude\n* [TimeSpan](https://developers.google.com/kml/documentation/kmlreference#timespan)\n\nNot supported yet:\n\n* NetworkLinks\n* GroundOverlays\n\n## GPX\n\nSupported:\n\n* Line Paths\n* 'name', 'desc', 'author', 'copyright', 'link', 'time', 'keywords' tags\n\n## FAQ\n\n### What is hashing?\n\nKML's style system isn't semantic: a typical document made through official tools\n(read Google) has hundreds of identical styles. So, togeojson does its best to\nmake this into something usable, by taking a quick hash of each style and exposing\n`styleUrl` and `styleHash` to users. This lets you work backwards from the awful\nrepresentation and build your own styles or derive data based on the classes\nchosen.\n\nImplied here is that this does not try to represent all data contained in KML\nstyles.\n\n## Protips:\n\nHave a string of XML and need an XML DOM?\n\n```js\nvar dom = (new DOMParser()).parseFromString(xmlStr, 'text/xml');\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mapbox/togeojson/issues"
  },
  "homepage": "https://github.com/mapbox/togeojson",
  "_id": "togeojson@0.10.1",
  "_from": "togeojson@^0.10.1"
}
