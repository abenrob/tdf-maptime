{
  "name": "chroniton",
  "version": "1.1.0",
  "description": "a timeline and time selector component",
  "main": "index.js",
  "scripts": {
    "start": "watchify example/index.js -o example/bundle.js & st -nc",
    "make-d3": "smash `cat d3/d3-requirements` > d3/d3-custom.js",
    "bundle": "browserify -s chroniton index.js | uglifyjs -c -m > chroniton-bundle.js && tail -n +3 index.js > chroniton-only.js"
  },
  "keywords": [
    "date",
    "range",
    "input",
    "timeline"
  ],
  "author": {
    "name": "Tom MacWright"
  },
  "license": "ISC",
  "devDependencies": {
    "browserify": "^8.1.0",
    "smash": "0.0.14",
    "st": "^0.5.2",
    "tape": "^3.0.3",
    "uglify-js": "^2.4.16",
    "watchify": "^2.2.1"
  },
  "dependencies": {
    "d3": "^3.5.3"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tmcw/chroniton.git"
  },
  "readme": "# chroniton\n\nA time slider input for time-based visualizations and data.\n\n## Features\n\n* Customizable label formatting\n* API and UI for playing & pausing time\n* Smart label position for current value\n* APIs for setting and retrieving time data\n* Touch-compatible for phones and such\n* Keybindings for navigating with ← and →\n\n## Installation\n\nThe most recommended technique is to use [browserify](http://browserify.org/)\nand use `var chroniton = require('chroniton')` to get the library.\n\n```sh\n$ npm install --save chroniton\n```\n\nOtherwise, download `chroniton-bundle.js` for chroniton **with d3 included**,\nor `chroniton-only.js` if you already are included d3 on your page as a global\nvariable. Use the latter, for instance, if you have a script-tag\ninclude like `<script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>`.\nYou'll need to copy these files to your server.\n\nThere's an example of the necessary CSS to style chroniton\nin `chroniton-example.css`.\n\n## API\n\nThis follows the [d3 reusable charts](http://bost.ocks.org/mike/chart/) pattern\nand uses [d3](http://d3js.org/) internally, so documentation from that library\nis useful to complement this documentation.\n\n### `chroniton()`\n\nConstructs a new timeline instance with default values.\n\nAll of the following API methods beginning with `.` are called on an instance\ncreated with `chroniton()`.\n\nThis exposes a function that can either be called in a chain with [d3's selection.call](https://github.com/mbostock/d3/wiki/Selections)\nmethod or called directly as `chroniton()(selection)`.\n\n**Example**\n\n```js\n// using d3\nd3.select(document.body)\n    .append('div')\n    .call(chroniton());\n\n// or not using d3\nvar div = document.body.appendChild(document.createElement('div'));\nchroniton()(div);\n```\n\n### `.domain([start, end])`\n\nGiven an array of two `Date` objects, set these as the earliest and latest\ndate selectable through the input.\n\n**Example**\n\n```js\nd3.select(document.body)\n  .append('div')\n  .call(\n    chroniton()\n      .domain([new Date(+new Date() - 60 * 1000), new Date()])\n```\n\n### `.keybinding(true or false)`\n\nTurn on and off the default keybindings that link arrow left & right keys\nto moving the value forward and backward.\n\n### `.labelFormat(function)`\n\nUse a different format to show the 'now' label in the input. The default\nvalue is `d3.time.format(\"%Y-%m-%d\")`. The function should take a `Date`\nobject as an argument and return a string. See [d3.time.format](https://github.com/mbostock/d3/wiki/Time-Formatting)\ndocumentation for hints.\n\n**Example**\n\n```js\nd3.select(document.body)\n  .append('div')\n  .call(\n    chroniton()\n      // hours and minutes - time format\n      .labelFormat(d3.time.format('%X')));\n```\n\n### `.hideLabel()`\n\nThe equvalent of calling `.labelFormat(function() { return ''; })`: this\nhides the label that shows what the current value is.\n\n### `.width(number)`, `.height(number)`\n\nChange these dimensions of the graph.\n\n### `.tapAxis(function)`\n\nCall an arbitrary function on the input's axis object. Useful for calling\nany of the [d3.svg.axis](https://github.com/mbostock/d3/wiki/SVG-Axes) methods\nbefore the thing is constructed.\n\n\n**Example**\n\n```js\nd3.select(document.body)\n  .append('div')\n  .call(\n    chroniton()\n      .tapAxis(function(axis) { axis.ticks(5); }));\n```\n\n### `.on('change', function)`\n\nListen for changes in the input. Programmatic changes also fire this event.\nCalls the given callback function with a current value as a `Date` object.\n\n**Example**\n\n```js\nd3.select(document.body)\n  .append('div')\n  .call(\n    chroniton()\n    .on('change', function(d) { alert(d); }));\n```\n\n### `.setValue(Date object, transition?)`\n\nSet the value of the input to a given `Date` object, redraw it, and fire\na `change` event.\n\nThe `transition` argument, by default `false`, is whether the timeline\nshould smoothly transition between the current date and the given date.\nIf it's true, it'll transition with default options. Otherwise, you can\ngive an object with options:\n\n* `duration`: how long the transition will take\n* `ease`: [a d3 easing function](https://github.com/mbostock/d3/wiki/Transitions#d3_ease)\n  given by name, like \"linear\"\n\n### `.isAtEnd()` & `.isAtStart()`\n\nReturn a boolean `true` or `false` value for whether the input is at the beginning\nor end of its permitted date range.\n\n### `.playbackRate(number)`\n\nSet the playback rate multiplier. The default is for the slider to move at 10px\nper second: this will change that by a given multiplier.\n\n### `.play()`\n\nStart playing: this animates the slider and emits `change` events as its\nvalue changes.\n\n### `.pause()`\n\nPause playing, keeping the playhead in its current place.\n\n### `.playButton(true or false)`\n\nSet whether to show a play / pause button on the input. Clicking the\nbutton plays or pauses.\n\n### `.playPause()`\n\nToggles chart between playing and pausing status.\n\n### `.stop()`\n\nPause playing and return the playhead to the beginning.\n\n### `.isPlaying()`\n\nReturns a `boolean` for whether the control is currently playing.\n\n### `.loop(true or false)`\n\nBy default `loop` is set to `false`. You can call this function so that when\nyou call `.play()` the input loops once it hits the end rather than stopping.\n\n# Development\n\n    $ git clone git@github.com:tmcw/chroniton.git\n    $ npm install\n\nRun `npm start` to rebuild the source and start a development server on\n`localhost:1337`. There's a testing page at `example/index.html`.\n\nRun `npm run bundle` to regenerate the bundle and standalone files.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tmcw/chroniton/issues"
  },
  "homepage": "https://github.com/tmcw/chroniton",
  "_id": "chroniton@1.1.0",
  "_from": "chroniton@^1.1.0"
}
